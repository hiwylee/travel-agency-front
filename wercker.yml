box:
  id: node:8.9.4
build:
  steps:
    - script:
        name: install grunt
        code: |
            pwd
            npm install grunt -g
            npm install
            ls
            grunt build
    - script:
        name: check
        code: |
            ls

push-to-releases:
  steps:
    # Push to OCI Registry
    - internal/docker-push:
        tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT
        ports: "8000"
        cmd: /pipeline/source/node_modules/grunt/bin/grunt serve
        working-dir: /pipeline/source/
        username: $DOCKER_USERNAME
        password: $OCI_AUTH_TOKEN
        repository: $DOCKER_REGISTRY/$DOCKER_REPO
        registry: https://$DOCKER_REGISTRY/v2
        
        #username: $OKE_USERNAME
        #password: $OKE_PASSWORD
        #repository: $OKE_REPOSITORY/$WERCKER_APPLICATION_NAME
        #registry: $OKE_REGISTRY

deploy-to-oke:
  box:
        id: alpine
        cmd: /bin/sh
  steps:
    - bash-template
    
    - script:
        name: "Visualise Kubernetes config"
        code: cat kubernetes-deployment.yml
    
    - kubectl:
        name: delete namespace
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_AUTH_TOKEN
        
        insecure-skip-tls-verify: true
        command:  delete namespace $APP_FRONT_NAMESPACE --ignore-not-found=true  
        
    - script:
        name: wait to delete namespace
        code: sleep 10
        
    - kubectl:
        name: create namespace    
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_AUTH_TOKEN
        insecure-skip-tls-verify: true
        command: create namespace $APP_FRONT_NAMESPACE  

    - kubectl:
        name: create OCR secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_AUTH_TOKEN
        insecure-skip-tls-verify: true
        command: create secret docker-registry ocirsecret --docker-server=$DOCKER_REGISTRY --docker-username=$OKE_USERNAME --docker-password='$OKE_PASSWORD' --docker-email=nobody@mail.com --namespace=$APP_FRONT_NAMESPACE 
        
    - kubectl:
        name: create deplyoment
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_AUTH_TOKEN
        insecure-skip-tls-verify: true
        command: create -f $WERCKER_ROOT/kubernetes-deployment.yml --namespace=$APP_FRONT_NAMESPACE 
